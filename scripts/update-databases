#!/bin/bash

# This script requires env var $MAXMIND_LICENSE_KEY to be set
if [ -z ${MAXMIND_LICENSE_KEY} ];
then
  echo "Need \$MAXMIND_LICENSE_KEY";
  exit 1
fi

editions=(GeoLite2-ASN-CSV GeoLite2-Country-CSV GeoLite2-City-CSV)

cd redist

did_update_anything=0

for edition in ${editions[*]}
do
  echo -e "\nDownloading checksum for latest version of ${edition}..."
  curl -s -L -u "${MAXMIND_ACCOUNT_ID}:${MAXMIND_LICENSE_KEY}" "https://download.maxmind.com/geoip/databases/${edition}/download?suffix=zip.sha256" -o ${edition}.zip.remote.sha256

  if [ -f "$edition.zip.sha256" ];
  then
	 echo "Checking against current version..."
	 remote=`cat ${edition}.zip.remote.sha256 | awk '{print $1;}'`
	 local=`cat ${edition}.zip.sha256`
	 echo "Remote: ${remote}"
	 echo "Local: ${local}"
	 if [ "$remote" == "$local" ];
	 then
		echo -e "\033[32;1m${edition} is already up to date\033[0m"
		rm ${edition}.zip.remote.sha256
		continue
	 else
		echo "Update available!"
	 fi
  fi

	echo "Cleaning previous version from git history..."
	cd ..
	./scripts/clean-git-objects ${edition}
	stat=$?
	if [ $stat -ne 0 ]
	then
		echo "Git objects cleaning failed with ${stat} exit code"
		exit 1
	fi
	cd redist

  echo "Downloading ${edition}..."
  curl -s -L -u "${MAXMIND_ACCOUNT_ID}:${MAXMIND_LICENSE_KEY}" "https://download.maxmind.com/geoip/databases/${edition}/download?suffix=zip" -o ${edition}.zip

  echo "Verifying checksum..."
  remote=`cat ${edition}.zip.remote.sha256 | awk '{print $1;}'`
  local=`shasum -a 256 ${edition}.zip | awk '{print $1;}'`
	echo "Remote: ${remote}"
	echo "Local: ${local}"
  if [ "$remote" != "$local" ];
  then
	 echo -e "\033[31;1mChecksums didn't match: failed download for ${edition}\033[0m"
	 exit 1
  else
	 rm ${edition}.zip.remote.sha256
	 echo ${local} > ${edition}.zip.sha256
	 did_update_anything=1
  fi

#  echo "Extracting database..."
#  tar -zxf ${edition}.zip --wildcards '*.mmdb' --strip-components 1

#  echo "Calculating database checksum for redistribution..."
#  calculated=`shasum -a 384 ${edition}.mmdb | awk '{print $1;}'`
#	echo "New checksum: ${calculated}"
#  echo "${calculated}" > ${edition}.mmdb.sha384

	echo "Committing update..."
	cd ..
	./scripts/commit-database ${edition}
	stat=$?
	if [ $stat -ne 0 ]
	then
		echo "Committing failed with ${stat} exit code"
		exit 1
	fi
	cd redist

  echo -e "\033[32;1mDatabase ${edition} successfully updated\033[0m"
done

echo -e "\n\033[1mAll databases processed\033[0m"

if [ $did_update_anything -eq 1 ];
then
	exit 0
else
	exit 65
fi
